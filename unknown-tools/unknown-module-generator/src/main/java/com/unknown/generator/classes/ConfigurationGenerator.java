package com.unknown.generator.classes;

import com.helger.jcodemodel.*;
import com.unknown.generator.configuration.models.Settings;
import com.unknown.generator.utils.GeneratorUtils;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

/**
 * This class aims to generate the configuration class of the generated module.
 *
 * @author t.postaire
 */
public class ConfigurationGenerator implements ClassGenerator {

    private AbstractJClass entityClass;
    private AbstractJClass dtoClass;
    private AbstractJClass mapperClass;
    private AbstractJClass repositoryClass;
    private AbstractJClass daoClass;
    private AbstractJClass daoImplClass;
    private AbstractJClass serviceClass;
    private AbstractJClass serviceImplClass;

    /**
     * Prepare the configuration class to be generated by initializing names for the entity, dto, mapper, repository,
     * dao and service.
     *
     * @param settings  module settings.
     * @param codeModel an instance of {@link JCodeModel} holding the context of the generated configuration class.
     */
    @Override
    public void prepare(Settings settings, JCodeModel codeModel) {
        this.entityClass = codeModel.ref(GeneratorUtils.getEntityClassName(settings));
        this.dtoClass = codeModel.ref(GeneratorUtils.getDtoClassName(settings));
        this.mapperClass = codeModel.ref(GeneratorUtils.getMapperClassName(settings));
        this.repositoryClass = codeModel.ref(GeneratorUtils.getRepositoryClassName(settings));
        this.daoClass = codeModel.ref(GeneratorUtils.getDaoClassName(settings));
        this.daoImplClass = codeModel.ref(GeneratorUtils.getDaoImplClassName(settings));
        this.serviceClass = codeModel.ref(GeneratorUtils.getServiceClassName(settings));
        this.serviceImplClass = codeModel.ref(GeneratorUtils.getServiceImplClassName(settings));
    }

    /**
     * Generate the configuration class with {@link Configuration @Configuration},
     * {@link EnableJpaRepositories @EnableJpaRepositories} and {@link EntityScan @EntityScan} annotations and all the
     * needed {@link Bean @Bean} for the module to work.
     *
     * @param settings  module settings.
     * @param codeModel an instance of JCodeModel holding the context of the generated configuration class.
     * @return a {@link JDefinedClass} representing the generated configuration class.
     */
    @Override
    public JDefinedClass generate(Settings settings, JCodeModel codeModel) {
        try {
            JDefinedClass definedClass = generateClass(settings, codeModel);

            appendMapperBean(definedClass);
            appendDaoBean(definedClass);
            appendServiceBean(definedClass);
            return definedClass;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private JDefinedClass generateClass(Settings settings, JCodeModel codeModel) throws JClassAlreadyExistsException {
        JDefinedClass definedClass = codeModel._class(GeneratorUtils.getConfigurationFullyQualifiedClassName(settings));
        definedClass.annotate(Configuration.class);
        definedClass.annotate(EnableJpaRepositories.class).param("basePackageClasses", repositoryClass.dotclass());
        definedClass.annotate(EntityScan.class).param("basePackageClasses", entityClass.dotclass());
        return definedClass;
    }

    private void appendMapperBean(JDefinedClass definedClass) {
        JMethod mapperBean = definedClass.method(JMod.PUBLIC, mapperClass, mapperClass.name());
        mapperBean.annotate(Bean.class);
        mapperBean.body()._return(JExpr._new(mapperClass));
    }

    private void appendDaoBean(JDefinedClass definedClass) {
        JMethod daoBean = definedClass.method(JMod.PUBLIC, daoClass, daoClass.name());
        daoBean.annotate(Bean.class);
        JVar daoBeanRepository = daoBean.param(repositoryClass, "repository");
        daoBean.body()._return(JExpr._new(daoImplClass).arg(daoBeanRepository));
    }

    private void appendServiceBean(JDefinedClass definedClass) {
        JMethod serviceBean = definedClass.method(JMod.PUBLIC, serviceClass, serviceClass.name());
        serviceBean.annotate(Bean.class);
        JVar serviceBeanDao = serviceBean.param(daoClass, "dao");
        JVar serviceBeanMapper = serviceBean.param(mapperClass, "mapper");
        serviceBean.body()._return(JExpr._new(serviceImplClass).arg(serviceBeanDao).arg(serviceBeanMapper));
    }
}
